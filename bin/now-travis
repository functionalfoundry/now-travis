#!/usr/bin/env node

const github = require('octonode')
const spawn = require('cross-spawn')
const normalizeUrl = require('normalize-url')
const urlRegex = require('url-regex')
const awaitUrl = require('await-url')

// Extract environment variables

const {
  CI,
  GH_TOKEN,
  NOW_ALIAS,
  NOW_NAME,
  NOW_TEAM,
  NOW_TOKEN,
  ROOT_DIR,
  TRAVIS,
  TRAVIS_BUILD_ID,
  TRAVIS_COMMIT,
  TRAVIS_EVENT_TYPE,
  TRAVIS_INSTANCE,
  TRAVIS_PULL_REQUEST_SHA,
  TRAVIS_PULL_REQUEST_SLUG,
  TRAVIS_REPO_SLUG,
} = process.env

// Validate environment variables

const ensureVar = (v, errmsg) => {
  if (!v) {
    throw new Error(errmsg)
  }
}

ensureVar(CI, 'Could not detect Travis CI environment')
ensureVar(TRAVIS, 'Could not detect Travis CI environment')
ensureVar(TRAVIS_BUILD_ID, 'TRAVIS_BUILD_ID is not defined')
ensureVar(TRAVIS_EVENT_TYPE, 'TRAVIS_EVENT_TYPE is not defined')
ensureVar(TRAVIS_REPO_SLUG, 'TRAVIS_REPO_SLUG is not defined')

ensureVar(GH_TOKEN, 'GH_TOKEN is not defined')
ensureVar(NOW_ALIAS, 'NOW_ALIAS is not defined')
ensureVar(NOW_NAME, 'NOW_NAME is not defined')
ensureVar(NOW_TOKEN, 'NOW_TOKEN is not defined')
ensureVar(ROOT_DIR, 'ROOT_DIR (e.g. "storybook-static/") is not defined')
ensureVar(TRAVIS_INSTANCE, 'TRAVIS_INSTANCE ("com" or "org") is not defined')

// Deployment logic

const isFork = () => {
  if (!TRAVIS_PULL_REQUEST_SLUG) {
    return false
  } else {
    const [prOwner] = TRAVIS_PULL_REQUEST_SLUG.split('/')
    const [repoOwner] = TRAVIS_REPO_SLUG.split('/')
    return prOwner !== repoOwner
  }
}

const normalizedUrl = content => {
  const urls = content.match(urlRegex()) || []
  return urls.map(url => normalizeUrl(url.trim().replace(/\.+$/, '')))[0]
}

const logOnError = message =>
  function onError(error) {
    if (error) {
      console.error(message, error)
    }
  }

const deploy = async (context, buildUrl, sha) => {
  const client = github.client(GH_TOKEN)
  const repo = client.repo(TRAVIS_REPO_SLUG)

  updateGitHubStatus({
    state: 'pending',
    description: `▲ Now / ${context} deployment pending`,
  })

  // Switch to the desired now Team, if any

  if (NOW_TEAM) {
    console.log('▲ Now / Switching to team:', NOW_TEAM)
    await spawnPromise('./node_modules/.bin/now', ['switch', NOW_TEAM])
  }

  // Prepare deployment

  const nowArgs = [
    '--token',
    NOW_TOKEN,
    '--no-clipboard',
    '--public',
    '--static',
    '--name',
    NOW_NAME,
    ROOT_DIR,
  ]
  safeLog('▲ Now / Running command:', `./node_modules/.bin/now ${nowArgs.join(' ')}`)

  // Perform deployment

  const result = await spawnPromise('./node_modules/.bin/now', nowArgs)
  const deploymentUrl = normalizedUrl(result)

  console.log('▲ Now / Deployment URL:', deploymentUrl)

  // Wait for the deployment to go live
  // Check on the site for ten minutes every 5 seconds

  updateGitHubStatus({
    state: 'pending',
    description: `▲ Now / ${context} deployment build started...`,
  })

  console.log(`▲ Now / Deployment started. Pinging ${deploymentUrl} until it's live!`)

  await awaitUrl(deploymentUrl, { interval: 5000, tries: 120 }).catch(error => {
    console.error('Error waiting for the deployment to go live')
    onError(error)
    throw error
  })

  console.log('▲ Now / Up and running!')

  // Alias the deployment if we're building a commit on master

  if (context === 'production') {
    await aliasDeploy()
  }

  // Done, update GitHub one last time

  console.log('▲ Now / All done!')
  updateGitHubStatus({
    state: 'success',
    description: `▲ Now / ${context} deployment is ready`,
  })

  function onError(err) {
    safeError(err)
    updateGitHubStatus({
      state: 'error',
      description: `▲ Now / ${context} deployment failed. See Travis logs for details`,
    })
  }

  function updateGitHubStatus(options) {
    const mergedOptions = Object.assign({ context, buildUrl }, options)
    console.log(`${mergedOptions.description}: ${mergedOptions.buildUrl}`)
    repo.status(sha, mergedOptions, logOnError('setting complete status'))
  }

  function aliasDeploy() {
    // if we're production, then we need to alias things
    console.log(`▲ Now / Building for production —> Update alias`)
    const aliasArgs = ['alias', 'set', buildUrl, NOW_ALIAS, '--token', NOW_TOKEN]
    safeLog('▲ Now / Running command:', `now ${aliasArgs.join(' ')}`)
    return spawnPromise('./node_modules/.bin/now', aliasArgs)
  }

  function spawnPromise(...args) {
    return new Promise((resolve, reject) => {
      const child = spawn(...args)
      let stdout = ''
      let stderr = ''
      child.stdout.on('data', data => {
        stdout += data
        safeLog(String(data))
      })
      child.stderr.on('data', data => {
        safeError(String(data))
        stderr += String(safeify(data))
      })

      child.on('error', error => {
        onError(error)
        reject(safeify(error))
      })

      child.on('close', () => {
        if (stderr) {
          reject(stderr)
        } else {
          resolve(stdout)
        }
      })
    })
  }

  function safeLog(...args) {
    const safeArgs = args.map(s => safeify(s))
    console.log(...safeArgs)
  }

  function safeError(...args) {
    const safeArgs = args.map(s => safeify(s))
    console.error(...safeArgs)
  }

  function safeify(s, safed = []) {
    if (safed.indexOf(s) !== -1) {
      return 'CIRCULAR'
    }
    safed.push(s)
    if (typeof s === 'string') {
      return s
        .split(NOW_TOKEN)
        .join('NOW_TOKEN')
        .split(GH_TOKEN)
        .join('GITHUB_TOKEN')
    } else if (typeof s === 'object' && s !== null) {
      return Object.keys(s).reduce((acc, k) => {
        acc[k] = safeify(s, safed)
        return acc
      }, {})
    } else {
      return s
    }
  }
}

// Deploy to now.sh

const travisBuildUrl =
  TRAVIS_INSTANCE === 'com'
    ? `https://travis-ci.com/${TRAVIS_REPO_SLUG}/builds/${TRAVIS_BUILD_ID}`
    : `https://travis-ci.org/${TRAVIS_REPO_SLUG}/builds/${TRAVIS_BUILD_ID}`

if (isFork()) {
  console.log(`▲ Now / Building a fork —> Skip ${travisBuildUrl} deployment`)
} else {
  switch (TRAVIS_EVENT_TYPE) {
    case 'pull_request': {
      deploy('staging', travisBuildUrl, TRAVIS_PULL_REQUEST_SHA).then(null, error =>
        console.error('▲ Now / Deployment failed:', error)
      )
      break
    }
    case 'push': {
      deploy('production', travisBuildUrl, TRAVIS_COMMIT).then(null, error =>
        console.error(`▲ Now / Deployment failed:`, error)
      )
      break
    }
    default: {
      console.error(
        `▲ Now / TRAVIS_EVENT_TYPE=${TRAVIS_EVENT_TYPE} is not supported by now-travis`
      )
    }
  }
}
