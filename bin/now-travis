#!/usr/bin/env node

const github = require('octonode')
const spawn = require('cross-spawn')
const normalizeUrl = require('normalize-url')
const urlRegex = require('url-regex')
const Now = require('now-client')

// Extract environment variables

const {
  CI,
  GH_TOKEN,
  NOW_ALIAS,
  NOW_AUTH_USER,
  NOW_AUTH_PASSWORD,
  NOW_NAME,
  NOW_PRIVATE,
  NOW_STATIC,
  NOW_TEAM,
  NOW_TOKEN,
  ROOT_DIR,
  TRAVIS,
  TRAVIS_BUILD_ID,
  TRAVIS_COMMIT,
  TRAVIS_EVENT_TYPE,
  TRAVIS_INSTANCE,
  TRAVIS_PULL_REQUEST_SHA,
  TRAVIS_PULL_REQUEST_SLUG,
  TRAVIS_REPO_SLUG,
} = process.env

// Validate environment variables

const ensureVar = (v, errmsg) => {
  if (!v) {
    throw new Error(errmsg)
  }
}

ensureVar(CI, 'Could not detect Travis CI environment')
ensureVar(TRAVIS, 'Could not detect Travis CI environment')
ensureVar(TRAVIS_BUILD_ID, 'TRAVIS_BUILD_ID is not defined')
ensureVar(TRAVIS_EVENT_TYPE, 'TRAVIS_EVENT_TYPE is not defined')
ensureVar(TRAVIS_REPO_SLUG, 'TRAVIS_REPO_SLUG is not defined')

ensureVar(GH_TOKEN, 'GH_TOKEN is not defined')
ensureVar(NOW_ALIAS, 'NOW_ALIAS is not defined')
ensureVar(NOW_NAME, 'NOW_NAME is not defined')
ensureVar(NOW_TOKEN, 'NOW_TOKEN is not defined')
ensureVar(ROOT_DIR, 'ROOT_DIR (e.g. "storybook-static/") is not defined')
ensureVar(TRAVIS_INSTANCE, 'TRAVIS_INSTANCE ("com" or "org") is not defined')

// Now utilities

const getDeploymentByUrl = async (now, url) => {
  const urlWithoutProtocol = url.replace(/https?:\/\//, '')
  const deployments = await now.getDeployments()
  return deployments.find(deployment => deployment.url === urlWithoutProtocol)
}

const waitForDeploymentState = (
  now,
  { deployment, state, timeout = 10000, interval = 1000 }
) => {
  const getDeploymentState = async (now, id) => {
    return (await now.getDeployment(id)).state
  }

  return new Promise(async (resolve, reject) => {
    const startTime = Date.now().valueOf()

    const handle = setInterval(async () => {
      if (Date.now().valueOf() > startTime + timeout) {
        clearInterval(handle)
        reject(new Error(`Timeout waiting for deployment state ${state}`))
      }

      if ((await getDeploymentState(now, deployment.uid)) === state) {
        clearInterval(handle)
        resolve(deployment)
      }
    }, interval)
  })
}

// Deployment logic

const isFork = () => {
  if (!TRAVIS_PULL_REQUEST_SLUG) {
    return false
  } else {
    const [prOwner] = TRAVIS_PULL_REQUEST_SLUG.split('/')
    const [repoOwner] = TRAVIS_REPO_SLUG.split('/')
    return prOwner !== repoOwner
  }
}

const normalizedUrl = content => {
  const urls = content.match(urlRegex()) || []
  return urls.map(url => normalizeUrl(url.trim().replace(/\.+$/, '')))[0]
}

const logOnError = message =>
  function onError(error) {
    if (error) {
      console.error(message, error)
    }
  }

const deploy = async (context, buildUrl, sha) => {
  const client = github.client(GH_TOKEN)
  const repo = client.repo(TRAVIS_REPO_SLUG)

  updateGitHubStatus({
    state: 'pending',
    description: `▲ Now / ${context} deployment pending`,
    target_url: buildUrl,
  })

  // Prepare deployment

  const nowArgs = ['--token', NOW_TOKEN, '--no-clipboard', '--name', NOW_NAME, ROOT_DIR]
  if (NOW_PRIVATE === 'true' || NOW_PRIVATE === true) {
    nowArgs.push('--private')
  } else {
    nowArgs.push('--public')
  }
  if (NOW_STATIC === 'true' || NOW_STATIC === true) {
    nowArgs.push('--static')
  }
  if (NOW_TEAM) {
    nowArgs.push('--team', NOW_TEAM)
  }
  if (NOW_AUTH_USER && NOW_AUTH_PASSWORD) {
    nowArgs.push(
      '-e',
      `AUTH_USER=${NOW_AUTH_USER}`,
      '-e',
      `AUTH_PASSWORD=${NOW_AUTH_PASSWORD}`
    )
  }
  safeLog('▲ Now / running command:', `now ${nowArgs.join(' ')}`)

  // Perform deployment

  const result = await spawnPromise('./node_modules/.bin/now', nowArgs)
  const deploymentUrl = normalizedUrl(result)

  console.log('▲ Now / deployment URL:', deploymentUrl)

  // Wait for the deployment to go live

  updateGitHubStatus({
    state: 'pending',
    description: `▲ Now / ${context} deployment build started...`,
    target_url: deploymentUrl,
  })

  console.log(`▲ Now / waiting for deployment to go live: ${deploymentUrl}`)

  let now
  let deployment
  try {
    now = new Now(NOW_TOKEN, NOW_TEAM)
    deployment = await getDeploymentByUrl(now, deploymentUrl)

    await waitForDeploymentState(now, {
      deployment: deployment,
      state: 'READY',
      timeout: 1000 * 60 * 5, // wait for 5 minutes
      interval: 5000, // every 5 secons
    })
  } catch (error) {
    console.error('Error waiting for the deployment to go live')
    onError(error)
    throw error
  }

  console.log('▲ Now / up and running!')

  // Alias the deployment if we're building a commit on master

  if (context === 'production' && now !== undefined && deployment !== undefined) {
    console.log(`▲ Now / building for production —> update alias`)
    try {
      await now.createAlias(deployment.uid, NOW_ALIAS)
    } catch (error) {
      console.error('Error creating the alias for the deployment')
      onError(error)
      throw error
    }
  }

  // Done, update GitHub one last time

  console.log('▲ Now / all done!')
  updateGitHubStatus({
    state: 'success',
    description: `▲ Now / ${context} deployment is live`,
    target_url: deploymentUrl,
  })

  function onError(err) {
    safeError(err)
    updateGitHubStatus({
      state: 'error',
      description: `▲ Now / ${context} deployment failed`,
      target_url: travisBuildUrl,
    })
  }

  function updateGitHubStatus(options) {
    const mergedOptions = Object.assign({ context, target_url: buildUrl }, options)
    console.log(`${mergedOptions.description}: ${mergedOptions.target_url}`)
    repo.status(sha, mergedOptions, logOnError('Failed to update GitHub repo status'))
  }

  function spawnPromise(...args) {
    return new Promise((resolve, reject) => {
      const child = spawn(...args)
      let stdout = ''
      let stderr = ''
      child.stdout.on('data', data => {
        stdout += data
        safeLog(String(data))
      })
      child.stderr.on('data', data => {
        safeError(String(data))
        stderr += String(safeify(data))
      })

      child.on('error', error => {
        onError(error)
        reject(safeify(error))
      })

      child.on('close', () => {
        if (stderr) {
          reject(stderr)
        } else {
          resolve(stdout)
        }
      })
    })
  }

  function safeLog(...args) {
    const safeArgs = args.map(s => safeify(s))
    console.log(...safeArgs)
  }

  function safeError(...args) {
    const safeArgs = args.map(s => safeify(s))
    console.error(...safeArgs)
  }

  function safeify(s, safed = []) {
    if (safed.indexOf(s) !== -1) {
      return 'CIRCULAR'
    }
    safed.push(s)
    if (typeof s === 'string') {
      return s
        .split(NOW_TOKEN)
        .join('NOW_TOKEN')
        .split(GH_TOKEN)
        .join('GITHUB_TOKEN')
    } else if (typeof s === 'object' && s !== null) {
      return Object.keys(s).reduce((acc, k) => {
        acc[k] = safeify(s, safed)
        return acc
      }, {})
    } else {
      return s
    }
  }
}

// Deploy to now.sh

const travisBuildUrl =
  TRAVIS_INSTANCE === 'com'
    ? `https://travis-ci.com/${TRAVIS_REPO_SLUG}/builds/${TRAVIS_BUILD_ID}`
    : `https://travis-ci.org/${TRAVIS_REPO_SLUG}/builds/${TRAVIS_BUILD_ID}`

if (isFork()) {
  console.log(`▲ Now / building a fork —> skip ${travisBuildUrl} deployment`)
} else {
  switch (TRAVIS_EVENT_TYPE) {
    case 'pull_request': {
      deploy('staging', travisBuildUrl, TRAVIS_PULL_REQUEST_SHA).then(null, error =>
        console.error('▲ Now / deployment failed:', error)
      )
      break
    }
    case 'push': {
      deploy('production', travisBuildUrl, TRAVIS_COMMIT).then(null, error =>
        console.error(`▲ Now / deployment failed:`, error)
      )
      break
    }
    default: {
      console.error(
        `▲ Now / TRAVIS_EVENT_TYPE=${TRAVIS_EVENT_TYPE} is not supported by now-travis`
      )
    }
  }
}
